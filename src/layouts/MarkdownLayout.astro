---
import MarkdownArticle from "~components/MarkdownArticle.astro";
import MainLayout from "./MainLayout.astro";
import MenuIcon from "~components/svgs/MenuIcon.astro";
import ChevronRightIcon from "~components/svgs/ChevronRightIcon.astro";

interface Props {
    title: string;
    description: string;
    hasMenu?: boolean;
}
const { hasMenu = true, title, description } = Astro.props;
---

<MainLayout title={title} description={description}>
    <div class="page-container">
        <section class="top-nav">
            {
                hasMenu ? (
                    <button id="btn-left">
                        <MenuIcon />
                        Menu
                    </button>
                ) : (
                    <span />
                )
            }
            <button id="btn-right">
                On this page
                <ChevronRightIcon />
            </button>
        </section>

        {
            hasMenu && (
                <aside class="left">
                    <slot name="left-sidebar" />
                </aside>
            )
        }
        <MarkdownArticle class="md-container">
            <slot />
        </MarkdownArticle>
        <aside class="right">
            <slot name="rigth-sidebar" />
        </aside>
    </div>
</MainLayout>

<script>
    const container = document.querySelector(".page-container");

    document
        .querySelector(".page-container .md-container")
        ?.addEventListener("click", () => {
            if (container?.hasAttribute("aria-open")) {
                container.attributes.removeNamedItem("aria-open");
            }
        });

    document
        .querySelector(".page-container #btn-left")
        ?.addEventListener("click", () =>
            container?.setAttribute("aria-open", "left")
        );

    document
        .querySelector(".page-container #btn-right")
        ?.addEventListener("click", () =>
            container?.setAttribute("aria-open", "right")
        );
</script>

<style>
    .page-container {
        max-width: var(--max-width);
        width: 100%;
        margin-left: auto;
        margin-right: auto;
        --color-border: rgba(var(--outline), 0.25);
    }

    .md-container {
        padding: 0 1.25rem 2rem;
        width: 100%;
    }

    .header-menu {
        @apply flex justify-between items-center;
        display: none;
    }

    #btn-left,
    #btn-right {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        @apply text-sm;
    }

    .top-nav {
        z-index: 20;
        height: var(--header-height);
        display: flex;
        gap: 2rem;
        justify-content: space-between;
        position: sticky;
        top: 0;
        border-bottom: 1px solid var(--color-border);
        background-color: rgba(var(--background));
        padding: 0 1.5rem;
    }

    @media screen and (min-width: 1024px) {
        .top-nav {
            display: none;
        }

        .page-container {
            display: grid;
            grid-template-columns:
                minmax(1fr, 21rem)
                minmax(1fr, 47rem)
                minmax(1fr, 21rem);
        }

        .md-container {
            max-width: 47rem;
            flex-grow: grow;
            width: 100%;
            grid-column: 2;
        }

        aside:is(.left, .right) {
            height: 100vh;
            max-width: 21rem;
            width: 100%;
            position: sticky;
            display: block;
            top: calc(var(--header-height) * 1.5);
            border-color: rgb(--color-border);
        }

        aside.left {
            grid-column: 1;
            border-right: 1px solid var(--color-border);
        }

        aside.right {
            grid-column: 3;
            border-left: 1px solid var(--color-border);
        }
    }

    @media screen and (max-width: 1023px) {
        .md-container {
            width: 100dvw;
        }

        .header-menu {
            display: block;
        }

        aside:is(.left, .right) {
            --width: 300px;
            position: absolute;
            inset: 0;
            max-width: var(--width);
            z-index: 20;
            @apply bg-surface shadow-2xl;
            transition: transform 0.3s ease-in-out;
        }

        aside.left {
            margin-right: calc(100dvw - var(--width));
            transform: translate(-100dvw, 0);
        }

        :is([aria-open="lef"], [aria-open="right"]) .md-container::after {
            content: "";
            position: absolute;
            inset: 0;
            z-index: 11;
            background: rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(2px);
            transition: all 0.5s ease;
        }

        [aria-open="left"] aside.left {
            transform: translate(0, 0);
        }

        [aria-open="right"] aside.right {
            transform: translate(0, 0);
        }

        aside.right {
            margin-left: calc(100dvw - var(--width));
            transform: translate(100dvw, 0);
        }
    }
</style>
